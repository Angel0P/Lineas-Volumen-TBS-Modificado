//+------------------------------------------------------------------+
//|                     Líneas de Volumen TBS.mq4                    |
//|                          Versión 1.33                            |
//|                  Copyright 2024, Angel Parrilla                  |
//+------------------------------------------------------------------+
// Descripción: Este indicador calcula líneas de referencia basadas
//              en el volumen ponderado, dando mayor peso a las
//              barras más recientes. Permite configurar el período
//              de ponderación, el horario de mercado y la fuente
//              de tiempo.

#property copyright "Copyright 2024 Angel Parrilla" // Directiva #property para copyright (sin coma innecesaria)
#property link      "[TuContacto]"           // Directiva #property para enlace
#property version   "1.33"                   // Directiva #property para versión
#property strict                             // Modo de compilación estricto
#property indicator_chart_window             // Mostrar en la ventana del gráfico
#property indicator_buffers 4                // Número de buffers
#property indicator_plots   4                // Número de plots (líneas)

//+------------------------------------------------------------------+
// Variables globales (PERSISTENTES)                                 |
//+------------------------------------------------------------------+
datetime windowStartTime;
long vol5MinBuffer[];
long vol30MinBuffer[];
datetime time5MinBuffer[];
datetime time30MinBuffer[];
int buffer5MinSize = 0;
int buffer30MinSize = 0;
datetime lastUpdateTime      = 0;            // Última actualización
double lastValidVol5Min      = 0;            // Último volumen válido 5min
double lastValidHalfVol5Min  = 0;            // Mitad del último volumen válido 5min
double lastValidVol30Min     = 0;            // Último volumen válido 30min
double lastValidHalfVol30Min = 0;            // Mitad del último volumen válido 30min
bool isIndicatorInitialized = false;         // Inicialización del indicador
int currentPeriod           = PERIOD_CURRENT;// Período actual
const double GLOBAL_MAX_SAFE_VOLUME = 1000000000.0; // Variable global
double globalLastValidVol5Min = 0;
double globalLastValidHalfVol5Min = 0;
double globalLastValidVol30Min = 0;
double globalLastValidHalfVol30Min = 0;
datetime globalNextUpdateTime = 0;
datetime globalLastUpdateTime = 0; //Para evitar recalcular en el mismo minuto
bool mensajeFueraHorarioMostrado = false;
bool enableDebugPrints = false;  // Controla las impresiones de depuración

//+------------------------------------------------------------------+
//| Constantes y definiciones                                        |
//+------------------------------------------------------------------+
#ifndef EMPTY_VALUE                          // Evita redefiniciones
#define EMPTY_VALUE 0.0                      // Valor para indicar ausencia de datos
#endif
#ifndef DOUBLE_MAX                           // Evita redefiniciones
#define DOUBLE_MAX DBL_MAX                   // Valor máximo de double
#endif

// Macros de conversión segura
#define SAFE_CONVERT_LONG_TO_DOUBLE(x) ((double)(x)) // Macro para conversión segura de long a double
#define SAFE_CONVERT_DOUBLE_TO_INT(x)  ((int)MathRound(x)) // Macro para conversión segura de double a int

// Configuración de arrays dinámicos
#define INITIAL_ARRAY_SIZE   100             // Tamaño inicial de los arrays dinámicos
#define ARRAY_RESIZE_STEP    50              // Incremento de tamaño de los arrays dinámicos
#define MAX_HISTORICAL_LOOKBACK 500          // Máximo de barras históricas a considerar

const long MAX_SAFE_VOLUME = 1000000000;     // Límite de volumen (protección contra desbordamientos)

//+------------------------------------------------------------------+
//| Enumeraciones                                                    |
//+------------------------------------------------------------------+
// Fuentes de tiempo
enum TimeSourceType {
    TS_SERVER = 0,                           // Hora del servidor
    TS_LOCAL,                                // Hora local
    TS_CHART                                 // Hora del gráfico
};

// Estilos de línea
enum LineStyleType {
    SOLID,                                   // ___ Línea sólida
    DASH,                                    // ------ Línea de guiones
    DOT,                                     // ······ Línea de puntos
    DASHDOT,                                 // -·-·-· Línea de guión y punto
    DASHDOTDOT                               // -··-·· Línea de guión, punto y punto
};

//+------------------------------------------------------------------+
//| Estructuras                                                      |
//+------------------------------------------------------------------+
struct VolumeData {                          // Estructura para almacenar datos de volumen por barra
    long volume;                             // Volumen
    datetime barTime;                        // Tiempo de la barra
    int barHour;                             // Hora de la barra
    bool isValid;                            // Validez de la barra
};

struct WeightedVolumeResult {                // Estructura para guardar el resultado del volumen ponderado
    double weightedVolumeSum;
    int barsCount;
};

//+------------------------------------------------------------------+
//| Parámetros de entrada                                            |
//+------------------------------------------------------------------+
input int DaysBack        = 3;               // Días de la "ventana deslizante"
input int MarketOpenHour  = 8;               // Hora de apertura del mercado
input int MarketCloseHour = 22;              // Hora de cierre del mercado
input TimeSourceType TimeReference = TS_SERVER; // Fuente de tiempo
input color LineColor     = clrYellow;       // Color de las líneas
input int LineWidth       = 1;               // Ancho de las líneas
input LineStyleType LineStyle= DASH;         // Estilo de las líneas
input int PonderedHours   = 16;              // Horas a ponderar
input int InputBarsToLookBack = 1000;        //Número de barras a copiar

//+------------------------------------------------------------------+
//| Buffers del indicador                                            |
//+------------------------------------------------------------------+
double volRef5MinBuffer[];                   // Volumen de referencia 5min
double volHalfRef5MinBuffer[];               // Medio volumen 5min
double volRef30MinBuffer[];                  // Volumen de referencia 30min
double volHalfRef30MinBuffer[];              // Medio volumen 30min

//+------------------------------------------------------------------+
// Funciones auxiliares (¡DEFINIDAS ANTES DE OnCalculate!)           |
//+------------------------------------------------------------------+
int TimeDiff(datetime time1, datetime time2) { // Calcula la diferencia en minutos entre dos tiempos
    return (int)((time1 - time2) / 60);
}

datetime getCurrentTime() {                  // Obtiene la hora actual según la fuente de tiempo seleccionada
    switch(TimeReference) {
        case TS_SERVER: return TimeCurrent();// Hora del servidor de trading
        case TS_LOCAL:  return TimeLocal();  // Hora local del sistema
        case TS_CHART:  return Time[0];      // Hora del primer candelabro del gráfico
        default:        return TimeCurrent();// Por defecto, usar hora del servidor
    }
}

string GetTimeSourceString() {               // Obtiene la descripción textual de la fuente de tiempo
   switch(TimeReference)
   {
      case TS_SERVER: return "del servidor";
      case TS_LOCAL:  return "local";
      case TS_CHART:  return "del gráfico";
      default:        return "desconocida";
   }
}

ENUM_LINE_STYLE ConvertLineStyle(LineStyleType style) { // Convierte LineStyleType a ENUM_LINE_STYLE
   static const ENUM_LINE_STYLE styleMap[] = {
      STYLE_SOLID, STYLE_DASH, STYLE_DOT, STYLE_DASHDOT, STYLE_DASHDOTDOT
   };
   return styleMap[style];
}

// Calcula el volumen ponderado dentro de un período de tiempo dado.
// MODIFICACIÓN IMPORTANTE: Se ha adaptado para usar la "ventana deslizante"
// y el peso base según las especificaciones.
WeightedVolumeResult calculateWeightedVolume(const datetime &time[], const long &volume[], int rates_total, datetime currentTime, int ponderedMinutes) {
    double weightedVolumeSum = 0;
    int barsCount = 0;
    datetime startTime = GetTradingStartTime(currentTime, DaysBack); // Inicio de la ventana deslizante

    for (int i = rates_total - 1; i >= 0; i--) {
        if (Time[i] >= startTime) { // Solo considerar barras dentro de la ventana
            double weight = 1.0;
            int minutesDiff = TimeDiff(currentTime, Time[i]);

            if (minutesDiff <= ponderedMinutes) {
                weight = 1.0 + (ponderedMinutes - minutesDiff) / (double)ponderedMinutes;
            }

            if (volume[i] > 0) { // Excluir barras con volumen 0
                weightedVolumeSum += (double)volume[i] * weight;
                barsCount++;
            }
        }
    }

    WeightedVolumeResult result;
    result.weightedVolumeSum = (barsCount > 0) ? weightedVolumeSum / barsCount : 0.0; // Promedio solo si hay barras
    result.barsCount = barsCount;
    return result;
}

datetime GetTradingStartTime(datetime currentTime, int days) { // Obtiene el inicio del período de trading de 'days' días atrás
    datetime startTime = currentTime;
    int countedDays = 0;
    while (countedDays < days) {
        startTime -= PeriodSeconds(PERIOD_D1);
        if (IsTradingDay(startTime)) {
            countedDays++;
        }
    }
    return startTime;
}

bool IsTradingDay(datetime time) { // Determina si un día es día de trading (excluye fines de semana)
    int dayOfWeek = TimeDayOfWeek(time);
    if (dayOfWeek == 0 || dayOfWeek == 6) return false; 
    return true;
}

//+------------------------------------------------------------------+
//| Propiedades del indicador (para MetaTrader)                      |
//+------------------------------------------------------------------+
#property indicator_type1   DRAW_LINE        // Tipo de línea 1
#property indicator_type2   DRAW_LINE        // Tipo de línea 2
#property indicator_type3   DRAW_LINE        // Tipo de línea 3
#property indicator_type4   DRAW_LINE        // Tipo de línea 4

#property indicator_label1  "Vol Ref 5min"   // Etiqueta línea 1
#property indicator_label2  "Half Vol Ref 5min"// Etiqueta línea 2
#property indicator_label3  "Vol Ref 30min"  // Etiqueta línea 3
#property indicator_label4  "Half Vol Ref 30min"// Etiqueta línea 4

// Función auxiliar para imprimir solo cuando sea necesario
void DebugPrint(string message) {
    if(enableDebugPrints) {
        Print(message);
    }
}

//+---------------------------------------------------------------------+
// Nueva función para calcular el tamaño máximo de datos históricos     |
//+---------------------------------------------------------------------+
int calculateMaxHistoricalData() { // Calcula el tamaño máximo de datos históricos a cargar
    // Calcular horas de mercado
    int marketHours = MarketCloseHour - MarketOpenHour;
    // Si el rango de horas es inusual, ajustar
    if (marketHours <= 0) {
        marketHours = 14;                    // Por defecto 14 horas
        Print("WARNING: Rango de horas de mercado inválido. Usando valor predeterminado.");
    }
    // Base: 15 barras por cada hora de mercado. Más realista para timeframe de 5 minutos
    int maxData = marketHours * 15;
    // Límites de seguridad
    if (maxData < 100) maxData = 100;        // Mínimo 100 barras
    if (maxData > 1000) maxData = 1000;      // Máximo 1000 barras
    Print("Rango de horas de mercado: ", marketHours, " horas. Datos históricos máximos calculados: ", maxData);

    return maxData;
}

//+---------------------------------------------------------------------+
// Función para recalcular si cambian las horas de mercado              |
//+---------------------------------------------------------------------+
void recalculateVolumeWindows() { // Recalcula las ventanas de volumen
    // Reiniciar ventanas con nuevo tamaño de datos históricos máximos
    volumeWindow5Min = DynamicVolumeWindow();
    volumeWindow30Min = DynamicVolumeWindow();
}

//+---------------------------------------------------------------------+
// Calcular volumen de referencia para un período específico            |
// Método principal para calcular promedios históricos de volumen       |
//+---------------------------------------------------------------------+
double calculateReferenceVolume(int timeframe, int horasPonderadas = 8, double factorDecay = 2.0) {
    datetime currentTime = getCurrentTime();
    int totalBars = InputBarsToLookBack;  // Usar el input definido por el usuario
    double totalVolume = 0;
    int validBars = 0;
    
    // Array para almacenar los volúmenes temporalmente
    MqlRates rates[];
    ArraySetAsSeries(rates, true);
    
    // Obtener los datos históricos
    int copied = CopyRates(Symbol(), timeframe, 0, totalBars, rates);
    if(copied <= 0) {
        Print("Error al copiar datos históricos: ", GetLastError());
        return 0;
    }
    
    // Calcular las horas del mercado en minutos
    int marketOpenMinutes = MarketOpenHour * 60;
    int marketCloseMinutes = MarketCloseHour * 60;
    
    // Recorrer las barras y calcular el volumen ponderado
    for(int i = 0; i < copied; i++) {
        datetime barTime = rates[i].time;
        int barHour = TimeHour(barTime);
        int barMinute = TimeMinute(barTime);
        int totalBarMinutes = barHour * 60 + barMinute;
        
        // Verificar si la barra está dentro del horario de mercado
        if(totalBarMinutes >= marketOpenMinutes && totalBarMinutes < marketCloseMinutes) {
            // Calcular el peso basado en la antigüedad de la barra
            int minutesOld = (int)((currentTime - barTime) / 60);
            double weight = 1.0;
            
            // Aplicar ponderación si está dentro del período de ponderación
            if(minutesOld <= (horasPonderadas * 60)) {
                weight = 1.0 + ((horasPonderadas * 60 - minutesOld) / (double)(horasPonderadas * 60));
                // Aplicar factor de decaimiento si se especifica
                if(factorDecay != 2.0) {
                    weight *= MathPow(factorDecay, (double)minutesOld / (60 * horasPonderadas));
                }
            }
            
            // Sumar el volumen ponderado
            totalVolume += rates[i].tick_volume * weight;
            validBars++;
            
            // Debug de los primeros 5 cálculos
            if(i < 5) {
                Print("Barra ", i, ": Tiempo=", TimeToString(barTime), 
                      ", Volumen=", rates[i].tick_volume,
                      ", Peso=", weight,
                      ", Volumen Ponderado=", rates[i].tick_volume * weight);
            }
        }
    }
    
    // Calcular y retornar el promedio
    if(validBars > 0) {
        double result = totalVolume / validBars;
        Print("Timeframe ", timeframe, ": Volumen Total=", totalVolume,
              ", Barras Válidas=", validBars,
              ", Promedio=", result);
        return result;
    }
    
    return 0;
}

//+---------------------------------------------------------------------+
// Funciones específicas para cálculo de volumen de referencia          |
// Simplifican llamadas para períodos de 5 y 30 minutos                 |
//+---------------------------------------------------------------------+
double calculateReference5MinVolume() {
    datetime currentTime = getCurrentTime();

    // Cambiar el timeframe a 5 minutos
    int ponderedMinutes = PonderedHours * 60;
    datetime timeArray[];
    long volumeArray[];
    int barsCount = iBars(NULL, PERIOD_M5);

    // Redimensionar arrays
    ArrayResize(timeArray, barsCount);
    ArrayResize(volumeArray, barsCount);

    // Copiar datos a los arrays
    for(int i = 0; i < barsCount; i++) {
        timeArray[i] = iTime(NULL, PERIOD_M5, i);
        volumeArray[i] = (int)iVolume(NULL, PERIOD_M5, i); // Conversión a tipo double
    }

    WeightedVolumeResult result = calculateWeightedVolume(timeArray, volumeArray, barsCount, currentTime, ponderedMinutes);

    return result.weightedVolumeSum;
}

double calculateReference30MinVolume() {
    datetime currentTime = getCurrentTime();

    // Cambiar el timeframe a 30 minutos
    int ponderedMinutes = PonderedHours * 60;
    datetime timeArray[];
    long volumeArray[];
    int barsCount = iBars(NULL, PERIOD_M30);

    // Redimensionar arrays
    ArrayResize(timeArray, barsCount);
    ArrayResize(volumeArray, barsCount);

    // Copiar datos a los arrays
    for(int i = 0; i < barsCount; i++) {
        timeArray[i] = iTime(NULL, PERIOD_M30, i);
        volumeArray[i] = (int)iVolume(NULL, PERIOD_M30, i); // Conversión a tipo double
    }

    WeightedVolumeResult result = calculateWeightedVolume(timeArray, volumeArray, barsCount, currentTime, ponderedMinutes);

    return result.weightedVolumeSum;
}

//+---------------------------------------------------------------------+
// Función de conversión segura de volumen. Características:            |
// - Manejo de conversiones de long a double                            |
// - Control de rangos                                                  |
// - Prevención de desbordamientos                                      |
//+---------------------------------------------------------------------+
double convertirVolumenSeguro(long volumen) {
    // Verificaciones de rango para prevenir errores de datos anómalos
    if (volumen < 0) {
        Print("WARNING: Volumen negativo detectado. Corrigiendo a 0.");
        return 0.0;
    }
    
    if (volumen > GLOBAL_MAX_SAFE_VOLUME) {  // Usar la constante global
        Print("WARNING: Volumen excede límite seguro. Truncando.");
        return GLOBAL_MAX_SAFE_VOLUME;
    }
    
    return (double)volumen;                  // Conversión explícita a double
}

//+---------------------------------------------------------------------+
// Función mejorada para cálculo de promedio de arrays. Características:|
// - Manejo seguro de conversión de tipos                               |
// - Precisión extendida con long double                                |
// - Control de división por cero                                       |
//+---------------------------------------------------------------------+
double calculateArrayAverage(double &arr[], int size) {
    if (size <= 0) {
        Print("WARNING: Intento de calcular promedio de array vacío");
        return 0.0;
    }
    // Usar long double para máxima precisión
    double sumaTotal = 0.0;
    int elementosValidos = 0;

    // Iterar con verificaciones de seguridad
    for (int i = 0; i < size; i++) {
        // Ignorar valores no numéricos o extremos
        if (MathIsValidNumber(arr[i]) && arr[i] != EMPTY_VALUE && arr[i] != DOUBLE_MAX) {
            sumaTotal += (int)arr[i];
            elementosValidos++;
        }
    }
    // Prevenir división por cero
    if (elementosValidos == 0) {
        Print("WARNING: Ningún elemento válido para promediar");
        return 0.0;
    }

    // Conversión segura redondeando
    return NormalizeDouble(sumaTotal / elementosValidos, 2);
}

//+---------------------------------------------------------------------+
// Clase para gestionar la ventana deslizante de volúmenes              |
//+---------------------------------------------------------------------+
class DynamicVolumeWindow {
private:
    VolumeData volumeData[];                 // Array de datos de volumen
    int maxHistoricalData;                   // Máximo número de elementos históricos
    int currentSize;                         // Tamaño actual de datos válidos

public:
    DynamicVolumeWindow() {
        // Calcular dinámicamente el tamaño máximo
        maxHistoricalData = calculateMaxHistoricalData();
        currentSize = 0;
        ArrayResize(volumeData, maxHistoricalData);
        for (int i = 0; i < maxHistoricalData; i++) {
            volumeData[i].isValid = false;
        }
    }
    // Añadir nueva barra con validación
    bool addBarData(long volume, datetime barTime) {
        int barHour = TimeHour(barTime);
        // Validar horario de mercado
        if (barHour < MarketOpenHour || barHour >= MarketCloseHour) 
            return false;

        // Si el array está lleno, eliminar la barra más antigua válida
        if (currentSize >= maxHistoricalData) {
            removeOldestValidBar();
        }

        // Encontrar primer slot disponible
        for (int i = 0; i < maxHistoricalData; i++) {
            if (!volumeData[i].isValid) {
                volumeData[i].volume = volume;
                volumeData[i].barTime = barTime;
                volumeData[i].barHour = barHour;
                volumeData[i].isValid = true;
                currentSize++;
                break;
            }
        }

        return true;
    }

    // Eliminar la barra más antigua válida
    void removeOldestValidBar() {
        if (currentSize <= 0) return;

        // Encontrar y marcar como inválida la barra más antigua
        datetime oldestTime = TimeCurrent();
        int oldestIndex = -1;

        for (int i = 0; i < maxHistoricalData; i++) {
            if (volumeData[i].isValid && volumeData[i].barTime < oldestTime) {
                oldestTime = volumeData[i].barTime;
                oldestIndex = i;
            }
        }

        if (oldestIndex != -1) {
            volumeData[oldestIndex].isValid = false;
            currentSize--;
        }
    }

    // Calcular promedio de volúmenes
    double calculateAverageVolume() {
        if (currentSize == 0) return 0.0;

        double totalVolume = 0.0;
        int validCount = 0;

        for (int i = 0; i < maxHistoricalData; i++) {
            if (volumeData[i].isValid) {
                totalVolume += (int)volumeData[i].volume;
                validCount++;
            }
        }

        return totalVolume / validCount;
    }

    // Depuración: Imprimir estado actual
    void debugPrintStatus() {
        Print("Estado de la ventana de volumen:");
        Print("Tamaño actual: ", currentSize);
        Print("Barras válidas:");

        for (int i = 0; i < maxHistoricalData; i++) {
            if (volumeData[i].isValid) {
                Print(" - Hora: ", volumeData[i].barTime, ", Volumen: ", volumeData[i].volume);
            }
        }
    }
};

// Instancias globales para diferentes periodos (¡DESPUÉS DE LA DEFINICIÓN DE LA CLASE!)
DynamicVolumeWindow volumeWindow5Min;
DynamicVolumeWindow volumeWindow30Min;

//+---------------------------------------------------------------------+
// Inicialización del indicador                                         |
//+---------------------------------------------------------------------+
int OnInit() {
    // Asignar los buffers correctamente
    SetIndexBuffer(0, volRef5MinBuffer);
    SetIndexBuffer(1, volHalfRef5MinBuffer);
    SetIndexBuffer(2, volRef30MinBuffer);
    SetIndexBuffer(3, volHalfRef30MinBuffer);

    // Establecer nombres correctos para cada línea
    SetIndexLabel(0, "Volumen 5min");
    SetIndexLabel(1, "Mitad Vol 5min");
    SetIndexLabel(2, "Volumen 30min");
    SetIndexLabel(3, "Mitad Vol 30min");

    // Configurar el estilo de las líneas
    for(int i = 0; i < 4; i++) {
        SetIndexStyle(i, DRAW_LINE, ConvertLineStyle(LineStyle), LineWidth, LineColor);
        SetIndexDrawBegin(i, 0);
        SetIndexShift(i, 0);
        SetIndexEmptyValue(i, EMPTY_VALUE); // Importante: establecer valor vacío
    }

    // Inicializar los buffers con EMPTY_VALUE
    ArrayInitialize(volRef5MinBuffer, EMPTY_VALUE);
    ArrayInitialize(volHalfRef5MinBuffer, EMPTY_VALUE);
    ArrayInitialize(volRef30MinBuffer, EMPTY_VALUE);
    ArrayInitialize(volHalfRef30MinBuffer, EMPTY_VALUE);

    // Inicialización de variables globales
    isIndicatorInitialized = false;
    lastUpdateTime = 0;
    lastValidVol5Min = 0;
    lastValidHalfVol5Min = 0;
    lastValidVol30Min = 0;
    lastValidHalfVol30Min = 0;

    // Resetear la variable de control
    mensajeFueraHorarioMostrado = false;

    return(INIT_SUCCEEDED);
}

//+---------------------------------------------------------------------+
// Calcula la próxima hora de actualización                              |
//+---------------------------------------------------------------------+
datetime calculateNextUpdateTime(datetime currentTime) {
    int currentHour = TimeHour(currentTime);
    datetime tempTime = currentTime;

    // Calcular la próxima hora de actualización (10, 14, 18 o 22)
    if (currentHour >= 22) {
        // Si es después de las 22:00, la próxima actualización será mañana a las 10:00
        tempTime += (24 - currentHour + 10) * 3600;
    } else if (currentHour >= 18) {
        // Si es después de las 18:00, próxima actualización a las 22:00
        tempTime += (22 - currentHour) * 3600;
    } else if (currentHour >= 14) {
        // Si es después de las 14:00, próxima actualización a las 18:00
        tempTime += (18 - currentHour) * 3600;
    } else if (currentHour >= 10) {
        // Si es después de las 10:00, próxima actualización a las 14:00
        tempTime += (14 - currentHour) * 3600;
    } else {
        // Si es antes de las 10:00, próxima actualización a las 10:00
        tempTime += (10 - currentHour) * 3600;
    }

    // Ajustar a la hora exacta (eliminar minutos y segundos)
    return tempTime - TimeMinute(tempTime) * 60 - TimeSeconds(tempTime);
}

//+---------------------------------------------------------------------+
// Función principal de cálculo del indicador                         |
//+---------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[]) {

    datetime currentTime = getCurrentTime();
    int currentHour = TimeHour(currentTime);

    // Verificar horario de mercado. Si está fuera del horario, limpiar los buffers
    if (currentHour < MarketOpenHour || currentHour >= MarketCloseHour) {
        if (!mensajeFueraHorarioMostrado) {
            Print("Fuera de horario de mercado: ", currentHour);
            mensajeFueraHorarioMostrado = true;
        }
        return rates_total; // Salir sin calcular nada
    }
    mensajeFueraHorarioMostrado = false;

    // Condición de actualización:
    // 1. Minuto 1 de las horas de actualización (10, 14, 18, 22).
    // 2. Primera inicialización del indicador.
    bool necesitaActualizar = (TimeMinute(currentTime) == 1 &&
                               (currentHour == 10 ||
                                currentHour == 14 ||
                                currentHour == 18 ||
                                currentHour == 22)) ||
                               !isIndicatorInitialized;

    if (necesitaActualizar) {
        Print("-------- Iniciando Cálculo de Volúmenes --------");

        // Calcular nuevos valores de volumen ponderado
        double nuevoVol5Min = calculateReference5MinVolume();
        double nuevoVol30Min = calculateReference30MinVolume();

        // Verificar y actualizar valores de 5 minutos
        if (nuevoVol5Min > 0 && nuevoVol5Min <= MAX_SAFE_VOLUME) {
            lastValidVol5Min = nuevoVol5Min;
            lastValidHalfVol5Min = nuevoVol5Min / 2.0;
            Print("5 minutos actualizado: ", DoubleToString(lastValidVol5Min, 2),
                  " (mitad: ", DoubleToString(lastValidHalfVol5Min, 2), ")");
        } else {
            Print("Valor 5 minutos inválido: ", nuevoVol5Min);
        }
        // Verificar y actualizar valores de 30 minutos
        if (nuevoVol30Min > 0 && nuevoVol30Min <= MAX_SAFE_VOLUME) {
            lastValidVol30Min = nuevoVol30Min;
            lastValidHalfVol30Min = nuevoVol30Min / 2.0;
            Print("30 minutos actualizado: ", DoubleToString(lastValidVol30Min, 2),
                  " (mitad: ", DoubleToString(lastValidHalfVol30Min, 2), ")");
        } else {
            Print("Valor 30 minutos inválido: ", nuevoVol30Min);
        }

        // Actualizar valores globales (importante para la visualización)
        globalLastValidVol5Min = lastValidVol5Min;
        globalLastValidHalfVol5Min = lastValidHalfVol5Min;
        globalLastValidVol30Min = lastValidVol30Min;
        globalLastValidHalfVol30Min = lastValidHalfVol30Min;
        globalLastUpdateTime = currentTime;
        isIndicatorInitialized = true; // Marcar como inicializado después del primer cálculo

        // Calcular próxima actualización
        datetime nextUpdate = calculateNextUpdateTime(currentTime);
        string timeInfo = TimeToString(nextUpdate, TIME_MINUTES);
        string dateInfo = StringFormat("%02d·%02d·%d",
                                       TimeDay(nextUpdate),
                                       TimeMonth(nextUpdate),
                                       TimeYear(nextUpdate));

        Print("------------------------------------------------------------------------------");
        Print("Próxima actualización a las ", timeInfo, " del ", dateInfo, " según la hora '", GetTimeSourceString(), "'.");
        Print("------------------------------------------------------------------------------");
    }

    // Visualización CONDICIONAL según el timeframe (CAMBIO CLAVE)
    int limit = rates_total - prev_calculated;
    for (int i = 0; i < limit; i++) {
        int idx = rates_total - 1 - i;
        if (Period() == PERIOD_M5) {
            volRef5MinBuffer[idx] = lastValidVol5Min;
            volHalfRef5MinBuffer[idx] = lastValidHalfVol5Min;
        } else if (Period() == PERIOD_M30) {
            volRef30MinBuffer[idx] = lastValidVol30Min;
            volHalfRef30MinBuffer[idx] = lastValidHalfVol30Min;
        } else {
            volRef5MinBuffer[idx] = EMPTY_VALUE;
            volHalfRef5MinBuffer[idx] = EMPTY_VALUE;
            volRef30MinBuffer[idx] = EMPTY_VALUE;
            volHalfRef30MinBuffer[idx] = EMPTY_VALUE;
        }
    }

    UpdateChartText();
    updateChartElements(globalLastValidVol5Min, globalLastValidVol30Min);
    return rates_total;
}

//+---------------------------------------------------------------------+
// Desinicialización del indicador                                      |
// Limpia recursos y elimina objetos creados                            |
//+---------------------------------------------------------------------+
void OnDeinit(const int reason) {
    // Obtener la razón de la desinicialización para el mensaje de log
    Print("Indicador de Volumen Ponderado desinicializado. Razón: ", GetDeinitReasonString(reason));

    // Eliminar las etiquetas de volumen de referencia (IMPORTANTE)
    string labelNames[] = {"VolumenRefText", "MitadVolumenRefText", "VolumenRef30MinText", "MitadVolumenRef30MinText"};
    for (int i = 0; i < ArraySize(labelNames); i++) {
        ObjectDelete(0, labelNames[i]);
    }

    // Eliminar todos los objetos creados con el prefijo "VolRef" (IMPORTANTE)
    ObjectsDeleteAll(0, "VolRef");

    // Liberar arrays dinámicos (Si se usan)
    ArrayFree(volRef5MinBuffer);
    ArrayFree(volHalfRef5MinBuffer);
    ArrayFree(volRef30MinBuffer);
    ArrayFree(volHalfRef30MinBuffer);

    // Reiniciar variables globales (OPCIONAL pero recomendable para evitar comportamientos extraños)
    isIndicatorInitialized = false;
    lastUpdateTime = 0;
    lastValidVol5Min = 0;
    lastValidHalfVol5Min = 0;
    lastValidVol30Min = 0;
    lastValidHalfVol30Min = 0;

    Print("Razón de desinicialización: ", GetDeinitReasonString(reason));
}

string GetDeinitReasonString(int reason) {
    string reason_string;
    switch (reason) {
        case REASON_CHARTCHANGE: reason_string = "Cambio de gráfico"; break;
        case REASON_CHARTCLOSE:  reason_string = "Cierre de gráfico"; break;
        case REASON_INITFAILED:  reason_string = "Fallo de inicialización"; break;
        case REASON_PARAMETERS:  reason_string = "Cambio de parámetros"; break;
        case REASON_PROGRAM:   reason_string = "Cierre del programa"; break;
        case REASON_TEMPLATE:    reason_string = "Aplicación de plantilla"; break;
        case REASON_RECOMPILE:   reason_string = "Recompilación"; break;
        default:                reason_string = "Razón desconocida (" + IntegerToString(reason) + ")";
    }
    return reason_string;
}

//+------------------------------------------------------------------+
//| Función para actualizar el texto en el gráfico                   |
//+------------------------------------------------------------------+
void UpdateChartText() {
    static datetime ultimaAdvertencia = 0;
    datetime tiempoActual = TimeCurrent();
    
    // Si no hay valores válidos, solo mostrar advertencia una vez cada 5 minutos
    if (lastValidVol5Min <= 0 && lastValidVol30Min <= 0) {
        if (tiempoActual - ultimaAdvertencia > 300) {
            Print("Advertencia: No hay valores válidos para mostrar");
            ultimaAdvertencia = tiempoActual;
        }
        return;
    }

    // Verificar que los valores no sean extremadamente grandes
    if (lastValidVol5Min > MAX_SAFE_VOLUME || lastValidVol30Min > MAX_SAFE_VOLUME) {
        if (tiempoActual - ultimaAdvertencia > 300) {
            Print("Advertencia: Valores de volumen fuera de rango");
            ultimaAdvertencia = tiempoActual;
        }
        return;
    }

    // Verificar que los buffers estén inicializados correctamente
    if (!CheckBuffers()) {
        if (tiempoActual - ultimaAdvertencia > 300) {
            Print("Error: Búferes no inicializados correctamente");
            ultimaAdvertencia = tiempoActual;
        }
        return;
    }

    // Configurar nombres y distancias de las etiquetas
    string labelNames[] = {"VolumenRefText", "MitadVolumenRefText", "VolumenRef30MinText", "MitadVolumenRef30MinText"};
    string labelPrefixes[] = {
        "Volumen de referencia 5 minutos: ",
        "Mitad Volumen de referencia 5 minutos: ",
        "Volumen de referencia 30 minutos: ",
        "Mitad Volumen de referencia 30 minutos: "
    };
    int yDistances[] = {50, 40, 30, 20};

    // Crear array de valores y asignarlos después de la declaración
    double currentValues[4];
    currentValues[0] = lastValidVol5Min;
    currentValues[1] = lastValidHalfVol5Min;
    currentValues[2] = lastValidVol30Min;
    currentValues[3] = lastValidHalfVol30Min;

    // Actualizar cada etiqueta con su valor correspondiente
    for (int i = 0; i < ArraySize(labelNames); i++) {
        if (currentValues[i] > 0) {  // Solo mostrar si el valor es válido
            UpdateLabel(labelNames[i], labelPrefixes[i], yDistances[i], currentValues[i]);
        }
    }
}

//+---------------------------------------------------------------------+
// Actualizar elementos gráficos de volumen                             |
// Gestiona la creación de líneas horizontales en la ventana de volumen |
//+---------------------------------------------------------------------+
void updateChartElements(double vol5Min, double vol30Min) {
    // Actualizar solo si los valores son válidos
    if(vol5Min <= 0 || vol30Min <= 0) return;

    // Buscar ventana de volumen
    int volumeWindow = ChartWindowFind(0, "Volumes");
    if(volumeWindow == -1) volumeWindow = 0;  // Si no encuentra la ventana de volumen, usar la principal

    // Actualizar líneas
    if(Period() == PERIOD_M5 || Period() == PERIOD_M1) {
        createVolumeLine("Vol5Min", vol5Min, volumeWindow);
        createVolumeLine("HalfVol5Min", vol5Min / 2.0, volumeWindow);
    }

    if(Period() == PERIOD_M30 || Period() == PERIOD_H1) {
        createVolumeLine("Vol30Min", vol30Min, volumeWindow);
        createVolumeLine("HalfVol30Min", vol30Min / 2.0, volumeWindow);
    }

    ChartRedraw();
}

//+------------------------------------------------------------------+
// Crear línea horizontal de volumen                                 |
// Genera una línea de referencia con propiedades personalizadas     |
//+------------------------------------------------------------------+
void createVolumeLine(string name, double value, int window) {
    string objName = "VolRef_" + name;

    // Crear línea horizontal con propiedades configurables
    if (ObjectCreate(0, objName, OBJ_HLINE, window, 0, value)) {
        ObjectSetInteger(0, objName, OBJPROP_COLOR, LineColor);
        ObjectSetInteger(0, objName, OBJPROP_STYLE, ConvertLineStyle(LineStyle));
        ObjectSetInteger(0, objName, OBJPROP_WIDTH, LineWidth);
        ObjectSetInteger(0, objName, OBJPROP_BACK, false);
        ObjectSetInteger(0, objName, OBJPROP_SELECTABLE, false);
    }
}

//+------------------------------------------------------------------+
//| Función para comprobar si los buffers están inicializados        |
//+------------------------------------------------------------------+
bool CheckBuffers() {
    if (ArraySize(volRef5MinBuffer) == 0 || ArraySize(volHalfRef5MinBuffer) == 0 ||
        ArraySize(volRef30MinBuffer) == 0 || ArraySize(volHalfRef30MinBuffer) == 0) {
        return false;
    }
    return true;
}

//+------------------------------------------------------------------+
//| Función para crear o actualizar etiqueta                         |
//+------------------------------------------------------------------+
void UpdateLabel(string name, string prefix, int yDistance, double value) {
    if(ObjectFind(0, name) == -1) {
        if(!ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0)) {
            Print("Error al crear etiqueta ", name, ": ", GetLastError());
            return;
        }
        
        // Configuración inicial de la etiqueta
        ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_LEFT_LOWER);
        ObjectSetInteger(0, name, OBJPROP_XDISTANCE, 10);
        ObjectSetInteger(0, name, OBJPROP_YDISTANCE, yDistance);
        ObjectSetInteger(0, name, OBJPROP_FONTSIZE, 7);
        ObjectSetInteger(0, name, OBJPROP_COLOR, clrWhite);
        ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false);
    }
    
    // Formatear el valor con dos decimales
    string formattedValue = DoubleToString(value, 2);
    string displayText = prefix + formattedValue;
    
    if(!ObjectSetString(0, name, OBJPROP_TEXT, displayText)) {
        Print("Error al actualizar texto de etiqueta ", name, ": ", GetLastError());
    }
}

//+------------------------------------------------------------------+
//| Función para crear etiquetas con propiedades estándar            |
//+------------------------------------------------------------------+
bool CreateLabel(string name, int yDistance) {
    if (!ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0)) {
        Print("Error al crear objeto etiqueta: ", name);
        return false;
    }

    // Configurar propiedades estándar
    if (!ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_LEFT_LOWER) ||
        !ObjectSetInteger(0, name, OBJPROP_XDISTANCE, 10) ||
        !ObjectSetInteger(0, name, OBJPROP_YDISTANCE, yDistance) ||
        !ObjectSetInteger(0, name, OBJPROP_FONTSIZE, 7) ||
        !ObjectSetInteger(0, name, OBJPROP_COLOR, clrWhite) ||
        !ObjectSetInteger(0, name, OBJPROP_SELECTABLE, false)) {
        Print("Error al configurar propiedades de la etiqueta: ", name);
        return false;
    }
    return true;
}
